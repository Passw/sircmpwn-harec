#!/bin/sh
all="$all rt"

rt() {
	arch=$(uname -m)
	case $(uname) in
		Linux)
			rtstart=rt/+linux/start+$arch.o
			cat <<-EOF
			rtstart=rt/+linux/start+$arch.o

			libhart_srcs=\
				rt/+linux/errno.ha \
				rt/+linux/segmalloc.ha \
				rt/+linux/syscallno+$arch.ha \
				rt/+linux/syscalls.ha \

			libhart_objs=\
				rt/+linux/syscall+$arch.o

			rt: libhart.a rt/+linux/start+$arch.o
			EOF
			;;
		FreeBSD)
			case $arch in
				amd64)
					arch=x86_64
					;;
				aarch64|riscv64)
					;;
				*)
					printf "unsupported FreeBSD arch %s\n" "$arch" >&2
					exit 1
					;;
			esac
			rtstart=rt/+freebsd/start+$arch.o
			cat <<-EOF
			rtstart=rt/+freebsd/start+$arch.o

			libhart_srcs=\
				rt/+freebsd/errno.ha \
				rt/+freebsd/segmalloc.ha \
				rt/+freebsd/syscallno.ha \
				rt/+freebsd/syscalls.ha \

			libhart_objs=\
				rt/+freebsd/syscall+$arch.o

			rt: libhart.a rt/+freebsd/start+$arch.o
			EOF
			;;
		OpenBSD)
			case $arch in
				amd64)
					arch=x86_64
					;;
				arm64)
					arch=aarch64
					;;
				riscv64)
					;;
				*)
					printf "unsupported OpenBSD arch %s\n" "$arch" >&2
					exit 1
					;;
			esac
			rtstart=rt/+openbsd/start+$arch.o
			cat <<-EOF
			rtstart=rt/+openbsd/start+$arch.o

			libhart_srcs=\
				rt/+openbsd/errno.ha \
				rt/+openbsd/segmalloc.ha \
				rt/+openbsd/syscallno.ha \
				rt/+openbsd/syscalls.ha \

			libhart_objs=\
				rt/+openbsd/syscall+$arch.o

			rt: libhart.a rt/+openbsd/start+$arch.o
			EOF
			;;
		NetBSD)
			case $arch in
				amd64)
					arch=x86_64
					;;
				*)
					printf "unsupported NetBSD arch %s\n" "$arch" >&2
					exit 1
					;;
			esac
			rtstart=rt/+netbsd/start+$arch.o
			cat <<-EOF
			rtstart=rt/+netbsd/start+$arch.o

			libhart_srcs=\
				rt/+netbsd/errno.ha \
				rt/+netbsd/segmalloc.ha \
				rt/+netbsd/syscallno.ha \
				rt/+netbsd/syscalls.ha \

			libhart_objs=\
				rt/+netbsd/syscall+$arch.o

			rt: libhart.a rt/+netbsd/start+$arch.o
			EOF
			;;
		*)
			printf "rt not supported for %s\n" "$(uname)" >&2
			exit 1
			;;
	esac
}
